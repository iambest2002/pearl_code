{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\n\r\nvar GetIntrinsic = require('get-intrinsic');\r\nvar define = require('define-data-property');\r\nvar hasDescriptors = require('has-property-descriptors')();\r\nvar gOPD = require('gopd');\r\n\r\nvar $TypeError = require('es-errors/type');\r\nvar $floor = GetIntrinsic('%Math.floor%');\r\n\r\n/** @type {import('.')} */\r\nmodule.exports = function setFunctionLength(fn, length) {\r\n\tif (typeof fn !== 'function') {\r\n\t\tthrow new $TypeError('`fn` is not a function');\r\n\t}\r\n\tif (typeof length !== 'number' || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) {\r\n\t\tthrow new $TypeError('`length` must be a positive 32-bit integer');\r\n\t}\r\n\r\n\tvar loose = arguments.length > 2 && !!arguments[2];\r\n\r\n\tvar functionLengthIsConfigurable = true;\r\n\tvar functionLengthIsWritable = true;\r\n\tif ('length' in fn && gOPD) {\r\n\t\tvar desc = gOPD(fn, 'length');\r\n\t\tif (desc && !desc.configurable) {\r\n\t\t\tfunctionLengthIsConfigurable = false;\r\n\t\t}\r\n\t\tif (desc && !desc.writable) {\r\n\t\t\tfunctionLengthIsWritable = false;\r\n\t\t}\r\n\t}\r\n\r\n\tif (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {\r\n\t\tif (hasDescriptors) {\r\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length, true, true);\r\n\t\t} else {\r\n\t\t\tdefine(/** @type {Parameters<define>[0]} */ (fn), 'length', length);\r\n\t\t}\r\n\t}\r\n\treturn fn;\r\n};\r\n"]}